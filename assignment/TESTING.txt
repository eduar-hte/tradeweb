OrderCache - TESTING
====================

Prerequisites
-------------
To compile and run the tests, you will need:

1. A C++ compiler with support for C++17 or later.

2. Google Test library.

(Windows)
In Visual Studio 2017 and later, Google Test is integrated into the
Visual Studio IDE as a default component of the Desktop Development with
C++ workload. For more info:
https://learn.microsoft.com/en-us/visualstudio/test/how-to-use-google-test-for-cpp?view=vs-2022

(Ubuntu/Debian/Linux)
Installation instructions:
```
sudo apt-get install libgtest-dev
cd /usr/src/gtest
sudo cmake CMakeLists.txt
sudo make
sudo cp *.a /usr/lib
```

(macOS)
Installation instructions:
```
brew install googletest
```

Compilation
-----------
To compile this application, follow these steps:

1. Open a terminal/command prompt and navigate to the OrderCache directory.

2. Run the following command:

(Ubuntu/Debian/Linux)
```
g++ --std=c++17 OrderCacheTests.cpp OrderCache.cpp -o OrderCacheTests -lgtest -lgtest_main -pthread
```

(macOS)
```
g++ --std=c++17 OrderCacheTests.cpp OrderCache.cpp -o OrderCacheTests -I/usr/local/include -L/usr/local/lib -lgtest -lgtest_main -pthread
```

Running the application
-----------------------
To run the OrderCache application, use the following command:

```
./OrderCacheTests
```

Exepected output
----------------

[==========] Running 16 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 16 tests from OrderCacheTest
[ RUN      ] OrderCacheTest.U1_UnitTest_addOrder
[       OK ] OrderCacheTest.U1_UnitTest_addOrder (0 ms)
[ RUN      ] OrderCacheTest.U2_UnitTest_getAllOrders
[       OK ] OrderCacheTest.U2_UnitTest_getAllOrders (0 ms)
[ RUN      ] OrderCacheTest.U3_UnitTest_cancelOrder
[       OK ] OrderCacheTest.U3_UnitTest_cancelOrder (0 ms)
[ RUN      ] OrderCacheTest.U4_UnitTest_cancelOrdersForUser
[       OK ] OrderCacheTest.U4_UnitTest_cancelOrdersForUser (0 ms)
[ RUN      ] OrderCacheTest.U5_UnitTest_cancelOrdersForSecIdWithMinimumQty
[       OK ] OrderCacheTest.U5_UnitTest_cancelOrdersForSecIdWithMinimumQty (0 ms)
[ RUN      ] OrderCacheTest.U6_UnitTest_getMatchingSizeForSecurityTest_Example1
[       OK ] OrderCacheTest.U6_UnitTest_getMatchingSizeForSecurityTest_Example1 (0 ms)
[ RUN      ] OrderCacheTest.U7_UnitTest_getMatchingSizeForSecurityTest_Example2
[       OK ] OrderCacheTest.U7_UnitTest_getMatchingSizeForSecurityTest_Example2 (0 ms)
[ RUN      ] OrderCacheTest.U8_UnitTest_getMatchingSizeForSecurityTest_Example3
[       OK ] OrderCacheTest.U8_UnitTest_getMatchingSizeForSecurityTest_Example3 (0 ms)
[ RUN      ] OrderCacheTest.O1_OrderMatchingTest_TestDifferentQuantities
[       OK ] OrderCacheTest.O1_OrderMatchingTest_TestDifferentQuantities (0 ms)
[ RUN      ] OrderCacheTest.O2_OrderMatchingTest_TestComplexCombinations
[       OK ] OrderCacheTest.O2_OrderMatchingTest_TestComplexCombinations (0 ms)
[ RUN      ] OrderCacheTest.O3_OrderMatchingTest_TestSameCompanyNoMatch
[       OK ] OrderCacheTest.O3_OrderMatchingTest_TestSameCompanyNoMatch (0 ms)
[ RUN      ] OrderCacheTest.C1_CancellationTest_CancelNonExistentOrder
[       OK ] OrderCacheTest.C1_CancellationTest_CancelNonExistentOrder (0 ms)
[ RUN      ] OrderCacheTest.C2_CancellationTest_CancelOrdersPartialOnMinQty
[       OK ] OrderCacheTest.C2_CancellationTest_CancelOrdersPartialOnMinQty (0 ms)
[ RUN      ] OrderCacheTest.C3_CancellationTest_CancelMultipleOrdersForUser
[       OK ] OrderCacheTest.C3_CancellationTest_CancelMultipleOrdersForUser (0 ms)
[ RUN      ] OrderCacheTest.M1_MatchingSizeTest_MultipleSmallOrdersMatchingLargeOrder
[       OK ] OrderCacheTest.M1_MatchingSizeTest_MultipleSmallOrdersMatchingLargeOrder (0 ms)
[ RUN      ] OrderCacheTest.M2_MatchingSizeTest_MultipleMatchingCombinations
[       OK ] OrderCacheTest.M2_MatchingSizeTest_MultipleMatchingCombinations (0 ms)
[----------] 16 tests from OrderCacheTest (0 ms total)

[----------] Global test environment tear-down
[==========] 16 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 16 tests.
